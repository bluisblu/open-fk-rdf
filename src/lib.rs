use encoding::EncoderTrap;
use encoding::{all::ISO_8859_1, DecoderTrap, Encoding};

static COL: [[u8; 256]; 8] = [
    [0x44, 0x45, 0x46, 0x47, 0x40, 0x41, 0x42, 0x43, 0x4C, 0x4D, 0x4E, 0x4F, 0x48, 0x49, 0x4A, 0x4B, 0x54, 0x55, 0x56, 0x57, 0x50, 0x51, 0x52, 0x53, 0x5C, 0x5D, 0x5E, 0x5F, 0x58, 0x59, 0x5A, 0x5B, 0x64, 0x65, 0x66, 0x67, 0x60, 0x61, 0x62, 0x63, 0x6C, 0x6D, 0x6E, 0x6F, 0x68, 0x69, 0x6A, 0x6B, 0x74, 0x75, 0x76, 0x77, 0x70, 0x71, 0x72, 0x73, 0x7C, 0x7D, 0x7E, 0x7F, 0x78, 0x79, 0x7A, 0x7B, 0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03, 0x0C, 0x0D, 0x0E, 0x0F, 0x08, 0x09, 0x0A, 0x0B, 0x14, 0x15, 0x16, 0x17, 0x10, 0x11, 0x12, 0x13, 0x1C, 0x1D, 0x1E, 0x1F, 0x18, 0x19, 0x1A, 0x1B, 0x24, 0x25, 0x26, 0x27, 0x20, 0x21, 0x22, 0x23, 0x2C, 0x2D, 0x2E, 0x2F, 0x28, 0x29, 0x2A, 0x2B, 0x34, 0x35, 0x36, 0x37, 0x30, 0x31, 0x32, 0x33, 0x3C, 0x3D, 0x3E, 0x3F, 0x38, 0x39, 0x3A, 0x3B, 0x84, 0x85, 0x86, 0x87, 0x80, 0x81, 0x82, 0x83, 0x8C, 0x8D, 0x8E, 0x8F, 0x88, 0x89, 0x8A, 0x8B, 0x94, 0x95, 0x96, 0x97, 0x90, 0x91, 0x92, 0x93, 0x9C, 0x9D, 0x9E, 0x9F, 0x98, 0x99, 0x9A, 0x9B, 0xA4, 0xA5, 0xA6, 0xA7, 0xA0, 0xA1, 0xA2, 0xA3, 0xAC, 0xAD, 0xAE, 0xAF, 0xA8, 0xA9, 0xAA, 0xAB, 0xB4, 0xB5, 0xB6, 0xB7, 0xB0, 0xB1, 0xB2, 0xB3, 0xBC, 0xBD, 0xBE, 0xBF, 0xB8, 0xB9, 0xBA, 0xBB, 0xC4, 0xC5, 0xC6, 0xC7, 0xC0, 0xC1, 0xC2, 0xC3, 0xCC, 0xCD, 0xCE, 0xCF, 0xC8, 0xC9, 0xCA, 0xCB, 0xD4, 0xD5, 0xD6, 0xD7, 0xD0, 0xD1, 0xD2, 0xD3, 0xDC, 0xDD, 0xDE, 0xDF, 0xD8, 0xD9, 0xDA, 0xDB, 0xE4, 0xE5, 0xE6, 0xE7, 0xE0, 0xE1, 0xE2, 0xE3, 0xEC, 0xED, 0xEE, 0xEF, 0xE8, 0xE9, 0xEA, 0xEB, 0xF4, 0xF5, 0xF6, 0xF7, 0xF0, 0xF1, 0xF2, 0xF3, 0xFC, 0xFD, 0xFE, 0xFF, 0xF8, 0xF9, 0xFA, 0xFB],
    [0x32, 0x33, 0x30, 0x31, 0x36, 0x37, 0x34, 0x35, 0x3A, 0x3B, 0x38, 0x39, 0x3E, 0x3F, 0x3C, 0x3D, 0x22, 0x23, 0x20, 0x21, 0x26, 0x27, 0x24, 0x25, 0x2A, 0x2B, 0x28, 0x29, 0x2E, 0x2F, 0x2C, 0x2D, 0x12, 0x13, 0x10, 0x11, 0x16, 0x17, 0x14, 0x15, 0x1A, 0x1B, 0x18, 0x19, 0x1E, 0x1F, 0x1C, 0x1D, 0x02, 0x03, 0x00, 0x01, 0x06, 0x07, 0x04, 0x05, 0x0A, 0x0B, 0x08, 0x09, 0x0E, 0x0F, 0x0C, 0x0D, 0x72, 0x73, 0x70, 0x71, 0x76, 0x77, 0x74, 0x75, 0x7A, 0x7B, 0x78, 0x79, 0x7E, 0x7F, 0x7C, 0x7D, 0x62, 0x63, 0x60, 0x61, 0x66, 0x67, 0x64, 0x65, 0x6A, 0x6B, 0x68, 0x69, 0x6E, 0x6F, 0x6C, 0x6D, 0x52, 0x53, 0x50, 0x51, 0x56, 0x57, 0x54, 0x55, 0x5A, 0x5B, 0x58, 0x59, 0x5E, 0x5F, 0x5C, 0x5D, 0x42, 0x43, 0x40, 0x41, 0x46, 0x47, 0x44, 0x45, 0x4A, 0x4B, 0x48, 0x49, 0x4E, 0x4F, 0x4C, 0x4D, 0xF2, 0xF3, 0xF0, 0xF1, 0xF6, 0xF7, 0xF4, 0xF5, 0xFA, 0xFB, 0xF8, 0xF9, 0xFE, 0xFF, 0xFC, 0xFD, 0xE2, 0xE3, 0xE0, 0xE1, 0xE6, 0xE7, 0xE4, 0xE5, 0xEA, 0xEB, 0xE8, 0xE9, 0xEE, 0xEF, 0xEC, 0xED, 0xD2, 0xD3, 0xD0, 0xD1, 0xD6, 0xD7, 0xD4, 0xD5, 0xDA, 0xDB, 0xD8, 0xD9, 0xDE, 0xDF, 0xDC, 0xDD, 0xC2, 0xC3, 0xC0, 0xC1, 0xC6, 0xC7, 0xC4, 0xC5, 0xCA, 0xCB, 0xC8, 0xC9, 0xCE, 0xCF, 0xCC, 0xCD, 0xB2, 0xB3, 0xB0, 0xB1, 0xB6, 0xB7, 0xB4, 0xB5, 0xBA, 0xBB, 0xB8, 0xB9, 0xBE, 0xBF, 0xBC, 0xBD, 0xA2, 0xA3, 0xA0, 0xA1, 0xA6, 0xA7, 0xA4, 0xA5, 0xAA, 0xAB, 0xA8, 0xA9, 0xAE, 0xAF, 0xAC, 0xAD, 0x92, 0x93, 0x90, 0x91, 0x96, 0x97, 0x94, 0x95, 0x9A, 0x9B, 0x98, 0x99, 0x9E, 0x9F, 0x9C, 0x9D, 0x82, 0x83, 0x80, 0x81, 0x86, 0x87, 0x84, 0x85, 0x8A, 0x8B, 0x88, 0x89, 0x8E, 0x8F, 0x8C, 0x8D],
    [0x6C, 0x6D, 0x6E, 0x6F, 0x68, 0x69, 0x6A, 0x6B, 0x64, 0x65, 0x66, 0x67, 0x60, 0x61, 0x62, 0x63, 0x7C, 0x7D, 0x7E, 0x7F, 0x78, 0x79, 0x7A, 0x7B, 0x74, 0x75, 0x76, 0x77, 0x70, 0x71, 0x72, 0x73, 0x4C, 0x4D, 0x4E, 0x4F, 0x48, 0x49, 0x4A, 0x4B, 0x44, 0x45, 0x46, 0x47, 0x40, 0x41, 0x42, 0x43, 0x5C, 0x5D, 0x5E, 0x5F, 0x58, 0x59, 0x5A, 0x5B, 0x54, 0x55, 0x56, 0x57, 0x50, 0x51, 0x52, 0x53, 0x2C, 0x2D, 0x2E, 0x2F, 0x28, 0x29, 0x2A, 0x2B, 0x24, 0x25, 0x26, 0x27, 0x20, 0x21, 0x22, 0x23, 0x3C, 0x3D, 0x3E, 0x3F, 0x38, 0x39, 0x3A, 0x3B, 0x34, 0x35, 0x36, 0x37, 0x30, 0x31, 0x32, 0x33, 0x0C, 0x0D, 0x0E, 0x0F, 0x08, 0x09, 0x0A, 0x0B, 0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03, 0x1C, 0x1D, 0x1E, 0x1F, 0x18, 0x19, 0x1A, 0x1B, 0x14, 0x15, 0x16, 0x17, 0x10, 0x11, 0x12, 0x13, 0xAC, 0xAD, 0xAE, 0xAF, 0xA8, 0xA9, 0xAA, 0xAB, 0xA4, 0xA5, 0xA6, 0xA7, 0xA0, 0xA1, 0xA2, 0xA3, 0xBC, 0xBD, 0xBE, 0xBF, 0xB8, 0xB9, 0xBA, 0xBB, 0xB4, 0xB5, 0xB6, 0xB7, 0xB0, 0xB1, 0xB2, 0xB3, 0x8C, 0x8D, 0x8E, 0x8F, 0x88, 0x89, 0x8A, 0x8B, 0x84, 0x85, 0x86, 0x87, 0x80, 0x81, 0x82, 0x83, 0x9C, 0x9D, 0x9E, 0x9F, 0x98, 0x99, 0x9A, 0x9B, 0x94, 0x95, 0x96, 0x97, 0x90, 0x91, 0x92, 0x93, 0xEC, 0xED, 0xEE, 0xEF, 0xE8, 0xE9, 0xEA, 0xEB, 0xE4, 0xE5, 0xE6, 0xE7, 0xE0, 0xE1, 0xE2, 0xE3, 0xFC, 0xFD, 0xFE, 0xFF, 0xF8, 0xF9, 0xFA, 0xFB, 0xF4, 0xF5, 0xF6, 0xF7, 0xF0, 0xF1, 0xF2, 0xF3, 0xCC, 0xCD, 0xCE, 0xCF, 0xC8, 0xC9, 0xCA, 0xCB, 0xC4, 0xC5, 0xC6, 0xC7, 0xC0, 0xC1, 0xC2, 0xC3, 0xDC, 0xDE, 0xDF, 0xDF, 0xD8, 0xD9, 0xDA, 0xDB, 0xD4, 0xD5, 0xD6, 0xD7, 0xD0, 0xD1, 0xD2, 0xD3],
    [0xE5, 0xE4, 0xE7, 0xE6, 0xE1, 0xE0, 0xE3, 0xE2, 0xED, 0xEC, 0xEF, 0xEE, 0xE9, 0xE8, 0xEB, 0xEA, 0xF5, 0xF4, 0xF7, 0xF6, 0xF1, 0xF0, 0xF3, 0xF2, 0xFD, 0xFC, 0xFF, 0xFE, 0xF9, 0xF8, 0xFB, 0xFA, 0xC5, 0xC4, 0xC7, 0xC6, 0xC1, 0xC0, 0xC3, 0xC2, 0xCD, 0xCC, 0xCF, 0xCE, 0xC9, 0xC8, 0xCB, 0xCA, 0xD5, 0xD4, 0xD7, 0xD6, 0xD1, 0xD0, 0xD3, 0xD2, 0xDD, 0xDC, 0xDF, 0xDE, 0xD9, 0xD8, 0xDB, 0xDA, 0xA5, 0xA4, 0xA7, 0xA6, 0xA1, 0xA0, 0xA3, 0xA2, 0xAD, 0xAC, 0xAF, 0xAE, 0xA9, 0xA8, 0xAB, 0xAA, 0xB5, 0xB4, 0xB7, 0xB6, 0xB1, 0xB0, 0xB3, 0xB2, 0xBD, 0xBC, 0xBF, 0xBE, 0xB9, 0xB8, 0xBB, 0xBA, 0x85, 0x84, 0x87, 0x86, 0x81, 0x80, 0x83, 0x82, 0x8D, 0x8C, 0x8F, 0x8E, 0x89, 0x88, 0x8B, 0x8A, 0x95, 0x94, 0x97, 0x96, 0x91, 0x90, 0x93, 0x92, 0x9D, 0x9C, 0x9F, 0x9E, 0x99, 0x98, 0x9B, 0x9A, 0x25, 0x24, 0x27, 0x26, 0x21, 0x20, 0x23, 0x22, 0x2D, 0x2C, 0x2F, 0x2E, 0x29, 0x28, 0x2B, 0x2A, 0x35, 0x34, 0x37, 0x36, 0x31, 0x30, 0x33, 0x32, 0x3D, 0x3C, 0x3F, 0x3E, 0x39, 0x38, 0x3B, 0x3A, 0x05, 0x04, 0x07, 0x06, 0x01, 0x00, 0x03, 0x02, 0x0D, 0x0C, 0x0F, 0x0E, 0x09, 0x08, 0x0B, 0x0A, 0x15, 0x14, 0x17, 0x16, 0x11, 0x10, 0x13, 0x12, 0x1D, 0x1C, 0x1F, 0x1E, 0x19, 0x18, 0x1B, 0x1A, 0x65, 0x64, 0x67, 0x66, 0x61, 0x60, 0x63, 0x62, 0x6D, 0x6C, 0x6F, 0x6E, 0x69, 0x68, 0x6B, 0x6A, 0x75, 0x74, 0x77, 0x76, 0x71, 0x70, 0x73, 0x72, 0x7D, 0x7C, 0x7F, 0x7E, 0x79, 0x78, 0x7B, 0x7A, 0x45, 0x44, 0x47, 0x46, 0x41, 0x40, 0x43, 0x42, 0x4D, 0x4C, 0x4F, 0x4E, 0x49, 0x48, 0x4B, 0x4A, 0x55, 0x54, 0x57, 0x56, 0x51, 0x50, 0x53, 0x52, 0x5D, 0x5C, 0x5F, 0x5E, 0x59, 0x58, 0x5B, 0x5A],
    [0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37],
    [0x79, 0x78, 0x7B, 0x7A, 0x7D, 0x7C, 0x7F, 0x7E, 0x71, 0x70, 0x73, 0x72, 0x75, 0x74, 0x77, 0x76, 0x69, 0x68, 0x6B, 0x6A, 0x6D, 0x6C, 0x6F, 0x6E, 0x61, 0x60, 0x63, 0x62, 0x65, 0x64, 0x67, 0x66, 0x59, 0x58, 0x5B, 0x5A, 0x5D, 0x5C, 0x5F, 0x5E, 0x51, 0x50, 0x53, 0x52, 0x55, 0x54, 0x57, 0x56, 0x49, 0x48, 0x4B, 0x4A, 0x4D, 0x4C, 0x4F, 0x4E, 0x41, 0x40, 0x43, 0x42, 0x45, 0x44, 0x47, 0x46, 0x39, 0x38, 0x3B, 0x3A, 0x3D, 0x3C, 0x3F, 0x3E, 0x31, 0x30, 0x33, 0x32, 0x35, 0x34, 0x37, 0x36, 0x29, 0x28, 0x2B, 0x2A, 0x2D, 0x2C, 0x2F, 0x2E, 0x21, 0x20, 0x23, 0x22, 0x25, 0x24, 0x27, 0x26, 0x19, 0x18, 0x1B, 0x1A, 0x1D, 0x1C, 0x1F, 0x1E, 0x11, 0x10, 0x13, 0x12, 0x15, 0x14, 0x17, 0x16, 0x09, 0x08, 0x0B, 0x0A, 0x0D, 0x0C, 0x0F, 0x0E, 0x01, 0x00, 0x03, 0x02, 0x05, 0x04, 0x07, 0x06, 0xB9, 0xB8, 0xBB, 0xBA, 0xBD, 0xBC, 0xBF, 0xBE, 0xB1, 0xB0, 0xB3, 0xB2, 0xB5, 0xB4, 0xB7, 0xB6, 0xA9, 0xA8, 0xAB, 0xAA, 0xAD, 0xAC, 0xAF, 0xAE, 0xA1, 0xA0, 0xA3, 0xA2, 0xA5, 0xA4, 0xA7, 0xA6, 0x99, 0x98, 0x9B, 0x9A, 0x9D, 0x9C, 0x9F, 0x9E, 0x91, 0x90, 0x93, 0x92, 0x95, 0x94, 0x97, 0x96, 0x89, 0x88, 0x8B, 0x8A, 0x8D, 0x8C, 0x8F, 0x8E, 0x81, 0x80, 0x83, 0x82, 0x85, 0x84, 0x87, 0x86, 0xF9, 0xF8, 0xFB, 0xFA, 0xFD, 0xFC, 0xFF, 0xFE, 0xF1, 0xF0, 0xF3, 0xF2, 0xF5, 0xF4, 0xF7, 0xF6, 0xE9, 0xE8, 0xEB, 0xEA, 0xED, 0xEC, 0xEF, 0xEE, 0xE1, 0xE0, 0xE3, 0xE2, 0xE5, 0xE4, 0xE7, 0xE6, 0xD9, 0xD8, 0xDB, 0xDA, 0xDD, 0xDC, 0xDF, 0xDE, 0xD1, 0xD0, 0xD3, 0xD2, 0xD5, 0xD4, 0xD7, 0xD6, 0xC9, 0xC8, 0xCB, 0xCA, 0xCD, 0xCC, 0xCF, 0xCE, 0xC1, 0xC0, 0xC3, 0xC2, 0xC5, 0xC4, 0xC7, 0xC6],
    [0x7F, 0x7E, 0x7D, 0x7C, 0x7B, 0x7A, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70, 0x6F, 0x6E, 0x6D, 0x6C, 0x6B, 0x6A, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5F, 0x5E, 0x5D, 0x5C, 0x5B, 0x5A, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4F, 0x4E, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xBF, 0xBE, 0xBD, 0xBC, 0xBB, 0xBA, 0xB9, 0xB8, 0xB7, 0xB6, 0xB5, 0xB4, 0xB3, 0xB2, 0xB1, 0xB0, 0xAF, 0xAE, 0xAD, 0xAC, 0xAB, 0xAA, 0xA9, 0xA8, 0xA7, 0xA6, 0xA5, 0xA4, 0xA3, 0xA2, 0xA1, 0xA0, 0x9F, 0x9E, 0x9D, 0x9C, 0x9B, 0x9A, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8F, 0x8E, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0, 0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0, 0xDF, 0xDE, 0xDD, 0xDC, 0xDB, 0xDA, 0xD9, 0xD8, 0xD7, 0xD6, 0xD5, 0xD4, 0xD3, 0xD2, 0xD1, 0xD0, 0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9, 0xC8, 0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0],
    [0x95, 0x94, 0x97, 0x96, 0x91, 0x90, 0x93, 0x92, 0x9D, 0x9C, 0x9F, 0x9E, 0x99, 0x98, 0x9B, 0x9A, 0x85, 0x84, 0x87, 0x86, 0x81, 0x80, 0x83, 0x82, 0x8D, 0x8C, 0x8F, 0x8E, 0x89, 0x88, 0x8B, 0x8A, 0xB5, 0xB4, 0xB7, 0xB6, 0xB1, 0xB0, 0xB3, 0xB2, 0xBD, 0xBC, 0xBF, 0xBE, 0xB9, 0xB8, 0xBB, 0xBA, 0xA5, 0xA4, 0xA7, 0xA6, 0xA1, 0xA0, 0xA3, 0xA2, 0xAD, 0xAC, 0xAF, 0xAE, 0xA9, 0xA8, 0xAB, 0xAA, 0xD5, 0xD4, 0xD7, 0xD6, 0xD1, 0xD0, 0xD3, 0xD2, 0xDD, 0xDC, 0xDF, 0xDE, 0xD9, 0xD8, 0xDB, 0xDA, 0xC5, 0xC4, 0xC7, 0xC6, 0xC1, 0xC0, 0xC3, 0xC2, 0xCD, 0xCC, 0xCF, 0xCE, 0xC9, 0xC8, 0xCB, 0xCA, 0xF5, 0xF4, 0xF7, 0xF6, 0xF1, 0xF0, 0xF3, 0xF2, 0xFD, 0xFC, 0xFF, 0xFE, 0xF9, 0xF8, 0xFB, 0xFA, 0xE5, 0xE4, 0xE7, 0xE6, 0xE1, 0xE0, 0xE3, 0xE2, 0xED, 0xEC, 0xEF, 0xEE, 0xE9, 0xE8, 0xEB, 0xEA, 0x55, 0x54, 0x57, 0x56, 0x51, 0x50, 0x53, 0x52, 0x5D, 0x5C, 0x5F, 0x5E, 0x59, 0x58, 0x5B, 0x5A, 0x45, 0x44, 0x47, 0x46, 0x41, 0x40, 0x43, 0x42, 0x4D, 0x4C, 0x4F, 0x4E, 0x49, 0x48, 0x4B, 0x4A, 0x75, 0x74, 0x77, 0x76, 0x71, 0x70, 0x73, 0x72, 0x7D, 0x7C, 0x7F, 0x7E, 0x79, 0x78, 0x7B, 0x7A, 0x65, 0x64, 0x67, 0x66, 0x61, 0x60, 0x63, 0x62, 0x6D, 0x6C, 0x6F, 0x6E, 0x69, 0x68, 0x6B, 0x6A, 0x15, 0x14, 0x17, 0x16, 0x11, 0x10, 0x13, 0x12, 0x1D, 0x1C, 0x1F, 0x1E, 0x19, 0x18, 0x1B, 0x1A, 0x05, 0x04, 0x07, 0x06, 0x01, 0x00, 0x03, 0x02, 0x0D, 0x0C, 0x0F, 0x0E, 0x09, 0x08, 0x0B, 0x0A, 0x35, 0x34, 0x37, 0x36, 0x31, 0x30, 0x33, 0x32, 0x3D, 0x3C, 0x3F, 0x3E, 0x39, 0x38, 0x3B, 0x3A, 0x25, 0x24, 0x27, 0x26, 0x21, 0x20, 0x23, 0x22, 0x2D, 0x2C, 0x2F, 0x2E, 0x29, 0x28, 0x2B, 0x2A]
];

static END: [&[u8]; 8] = [
    &[0x44, 0x32, 0x6C, 0xE5, 0x8B],
    &[0x32, 0x6C, 0xE5, 0x8C],
    &[0x6C, 0xE5, 0x8D],
    &[0xE5, 0x8E],
    &[0x8F],
    &[0x79, 0x7F, 0x95, 0x44, 0x32, 0x6C, 0xE5, 0x88],
    &[0x7F, 0x95, 0x44, 0x32, 0x6C, 0xE5, 0x88],
    &[0x95, 0x44, 0x32, 0x6C, 0xE5, 0x88],
];

static START: [u8; 8] = [
    0xFF, 0x00, 0xFF, 0xAC, 0xEB, 0x96, 0xC4, 0x2A
];

pub fn decode_rdf(encoded: &[u8]) -> Result<String, &'static str> {
    let encoded_str = ISO_8859_1.decode(encoded, DecoderTrap::Strict)
        .map_err(|_| "Failed to decode bytes to ISO-8859-1 string")?;

    let mut current_col = 0;
    let mut ret = Vec::with_capacity(encoded_str.len());
    let mut endchar = 0;

    for character in encoded_str.chars() {
        if let Some(i) = COL[current_col].iter().position(|&b| b == character as u8) {
            let decoded_char = (i as u8) as char;
            ret.push(decoded_char);
            if decoded_char == '>' {
                endchar = ret.len();
            }
        }

        current_col = (current_col + 1) % 8;
    }

    let ret_string: String = ret.into_iter().collect();

    let start_len = START.len();
    if endchar > start_len {
        return Ok(ret_string.chars().skip(start_len).take(endchar - start_len).collect());
    }

    Ok(String::new())
}

pub fn encode_xml(decoded: &str) -> Result<Vec<u8>, &'static str> {
    let mut current_col = 0;
    let mut ret_bytes = Vec::with_capacity(decoded.len());

    for character in decoded.chars() {
        if let Some(i) = (0..256).position(|x| (x as u8) as char == character) {
            if let Some(&col_byte) = COL.get(current_col).and_then(|col| col.get(i)) {
                ret_bytes.push(col_byte);
            }
        }
        current_col = (current_col + 1) % 8;
    }

    let start_str: String = START.iter().map(|&b| b as char).collect();
    let end_str: String = END.get(current_col)
        .map(|arr| arr.iter().map(|&b| b as char).collect())
        .unwrap_or_default();

    let final_string = format!("{}{}{}", start_str, ret_bytes.iter().map(|&b| b as char).collect::<String>(), end_str);

    ISO_8859_1.encode(&final_string, EncoderTrap::Strict)
        .map_err(|_| "Failed to encode string to ISO-8859-1")
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_works() {
        let encoded: &[u8] = &[255, 0, 255, 172, 235, 150, 196, 42, 120, 66, 30, 138, 238, 16, 19, 240, 100, 81, 3, 134, 231, 23, 10, 225, 55, 15, 78, 213, 170, 89, 24, 251, 37, 95, 9, 216, 170, 91, 95, 230, 37, 68, 9, 149, 233, 10, 12, 226, 43, 64, 8, 216, 170, 72, 93, 181, 50, 87, 30, 216, 170, 76, 93, 181, 49, 65, 9, 151, 225, 29, 66, 183, 102, 18, 2, 132, 229, 28, 66, 183, 2, 125, 35, 199, 168, 9, 30, 230, 55, 69, 3, 151, 236, 68, 93, 215, 5, 96, 78, 197, 234, 24, 19, 244, 42, 81, 9, 216, 170, 72, 79, 165, 102, 18, 4, 140, 230, 13, 46, 168, 102, 118, 37, 161, 173, 75, 79, 220, 16, 23, 94, 213, 223, 54, 45, 222, 102, 18, 4, 140, 230, 13, 62, 168, 102, 107, 41, 182, 173, 75, 79, 220, 16, 23, 94, 213, 204, 48, 59, 183, 122, 63, 102, 197, 168, 69, 18, 224, 55, 91, 15, 197, 254, 22, 19, 224, 41, 87, 81, 199, 189, 73, 93, 181, 107, 12, 97, 239, 168, 89, 67, 230, 43, 71, 2, 129, 238, 1, 95, 227, 43, 94, 25, 136, 237, 68, 93, 160, 116, 16, 76, 202, 182, 116, 117, 181, 100, 14, 1, 128, 230, 12, 65, 152, 78, 18, 76, 197, 168, 69, 22, 225, 33, 95, 31, 197, 238, 16, 7, 240, 32, 15, 78, 212, 170, 71, 114, 159, 100, 18, 76, 197, 168, 89, 67, 252, 48, 87, 1, 197, 225, 29, 66, 183, 117, 81, 78, 197, 252, 22, 11, 244, 40, 15, 78, 212, 170, 89, 10, 230, 33, 86, 81, 199, 184, 91, 95, 186, 122, 63, 102, 197, 168, 89, 95, 181, 100, 14, 5, 145, 237, 20, 95, 252, 32, 15, 78, 212, 237, 91, 95, 225, 43, 70, 13, 137, 181, 91, 78, 183, 100, 71, 31, 128, 236, 68, 93, 165, 102, 18, 67, 219, 133, 115, 95, 181, 100, 18, 76, 197, 180, 16, 11, 240, 41, 18, 5, 129, 181, 91, 78, 252, 102, 18, 24, 138, 252, 24, 19, 168, 102, 3, 78, 197, 253, 10, 26, 241, 121, 16, 92, 199, 168, 86, 65, 152, 78, 18, 76, 197, 168, 89, 95, 169, 
        45, 70, 9, 136, 168, 16, 27, 168, 102, 3, 29, 199, 168, 13, 16, 225, 37, 94, 81, 199, 185, 91, 95, 224, 55, 87, 8, 216, 170, 73, 93, 181, 107, 12, 97, 239, 168, 89, 95, 181, 100, 18, 80, 140, 252, 28, 18, 181, 45, 86, 81, 199, 186, 24, 93, 181, 48, 93, 24, 132, 228, 68, 93, 164, 102, 18, 25, 150, 237, 29, 66, 183, 116, 16, 76, 202, 182, 116, 117, 181, 100, 18, 76, 197, 168, 69, 22, 225, 33, 95, 76, 140, 236, 68, 93, 163, 38, 16, 76, 145, 231, 13, 30, 249, 121, 16, 93, 199, 168, 12, 12, 240, 32, 15, 78, 213, 170, 89, 80, 171, 73, 56, 76, 197, 168, 89, 95, 181, 120, 91, 24, 128, 229, 89, 22, 241, 121, 16, 85, 131, 170, 89, 11, 250, 48, 83, 0, 216, 170, 72, 93, 181, 49, 65, 9, 129, 181, 91, 79, 183, 100, 29, 82, 232, 130, 89, 95, 181, 100, 18, 76, 217, 225, 13, 26, 248, 100, 91, 8, 216, 170, 72, 79, 243, 102, 18, 24, 138, 252, 24, 19, 168, 102, 3, 78, 197, 253, 10, 26, 241, 121, 16, 92, 199, 168, 86, 65, 152, 78, 18, 76, 197, 168, 89, 95, 169, 45, 70, 9, 136, 168, 16, 27, 168, 102, 3, 30, 199, 168, 13, 16, 225, 37, 94, 81, 199, 185, 91, 95, 224, 55, 87, 8, 216, 170, 73, 93, 181, 107, 12, 97, 239, 168, 89, 95, 181, 100, 18, 80, 140, 252, 28, 18, 181, 45, 86, 81, 199, 185, 24, 30, 183, 100, 70, 3, 145, 233, 21, 66, 183, 117, 16, 76, 144, 251, 28, 27, 168, 102, 2, 78, 197, 167, 71, 114, 159, 100, 18, 
        76, 197, 168, 89, 67, 252, 48, 87, 1, 197, 225, 29, 66, 183, 119, 86, 78, 197, 252, 22, 11, 244, 40, 15, 78, 212, 170, 89, 10, 230, 33, 86, 81, 199, 184, 91, 95, 186, 122, 63, 102, 197, 168, 89, 95, 181, 100, 14, 5, 145, 237, 20, 95, 252, 32, 15, 78, 208, 236, 91, 95, 225, 43, 70, 13, 137, 181, 91, 78, 183, 100, 71, 31, 128, 236, 68, 93, 165, 102, 18, 67, 219, 133, 115, 95, 181, 100, 18, 76, 197, 180, 16, 11, 240, 41, 18, 5, 129, 181, 91, 71, 242, 102, 18, 24, 138, 252, 24, 19, 168, 102, 3, 78, 197, 253, 10, 26, 241, 121, 16, 92, 199, 168, 86, 65, 152, 78, 18, 76, 197, 168, 89, 95, 169, 45, 70, 9, 136, 168, 16, 27, 168, 102, 11, 8, 199, 168, 13, 16, 225, 37, 94, 81, 199, 185, 91, 95, 224, 55, 87, 8, 216, 170, 73, 93, 181, 107, 12, 97, 239, 168, 89, 95, 181, 100, 18, 80, 140, 252, 28, 18, 181, 45, 86, 81, 199, 185, 79, 28, 183, 100, 70, 3, 145, 233, 21, 66, 183, 117, 16, 76, 144, 251, 28, 27, 168, 102, 2, 78, 197, 167, 71, 114, 159, 100, 18, 76, 197, 168, 89, 67, 252, 48, 87, 1, 197, 225, 29, 66, 183, 117, 10, 11, 199, 168, 13, 16, 225, 37, 94, 81, 199, 185, 91, 95, 224, 55, 87, 8, 216, 170, 73, 93, 181, 107, 12, 97, 239, 168, 89, 95, 181, 100, 18, 80, 140, 252, 28, 18, 181, 45, 86, 81, 199, 188, 73, 26, 183, 100, 70, 3, 145, 233, 21, 66, 183, 117, 16, 76, 144, 251, 28, 27, 168, 102, 2, 78, 197, 
        167, 71, 114, 159, 100, 18, 76, 197, 168, 89, 67, 252, 48, 87, 1, 197, 225, 29, 66, 183, 114, 11, 15, 199, 168, 13, 16, 225, 37, 94, 81, 199, 185, 91, 95, 224, 55, 87, 8, 216, 170, 73, 93, 181, 107, 12, 97, 239, 168, 89, 95, 181, 100, 18, 80, 140, 252, 28, 18, 181, 45, 86, 81, 199, 185, 73, 79, 244, 102, 18, 24, 138, 252, 24, 19, 168, 102, 3, 78, 197, 253, 10, 26, 241, 121, 16, 92, 199, 168, 86, 65, 152, 78, 18, 76, 197, 168, 89, 95, 169, 45, 70, 9, 136, 168, 16, 27, 168, 102, 3, 93, 214, 239, 91, 95, 225, 43, 70, 13, 137, 181, 91, 78, 183, 100, 71, 31, 128, 236, 68, 93, 165, 102, 18, 67, 219, 133, 115, 95, 181, 100, 18, 76, 197, 180, 16, 11, 240, 41, 18, 5, 129, 181, 91, 78, 162, 116, 81, 78, 197, 252, 22, 11, 244, 40, 15, 78, 212, 170, 89, 
        10, 230, 33, 86, 81, 199, 184, 91, 95, 186, 122, 63, 102, 197, 168, 89, 95, 169, 107, 91, 24, 128, 229, 10, 65, 152, 78, 18, 76, 217, 167, 20, 26, 251, 49, 12, 97, 239, 168, 89, 67, 242, 37, 95, 9, 150, 168, 86, 65, 152, 78, 18, 76, 217, 252, 11, 16, 229, 44, 91, 9, 150, 168, 86, 65, 152, 78, 18, 76, 217, 229, 16, 19, 240, 55, 70, 3, 139, 237, 10, 65, 152, 78, 18, 76, 197, 
        168, 69, 18, 252, 40, 87, 31, 145, 231, 23, 26, 181, 45, 86, 81, 199, 185, 91, 95, 186, 122, 63, 102, 197, 168, 69, 80, 248, 45, 94, 9, 150, 252, 22, 17, 240, 55, 12, 97, 239, 168, 89, 67, 239, 43, 92, 9, 150, 182, 116, 117, 181, 100, 18, 76, 217, 242, 22, 17, 240, 100, 91, 8, 216, 170, 26, 22, 225, 61, 16, 82, 232, 130, 89, 95, 181, 100, 18, 76, 217, 239, 28, 18, 181, 39, 
        93, 25, 139, 252, 68, 93, 165, 102, 18, 67, 219, 133, 115, 95, 181, 100, 18, 76, 197, 180, 20, 30, 229, 100, 70, 5, 137, 237, 10, 66, 183, 116, 2, 92, 213, 184, 73, 79, 165, 116, 2, 92, 213, 185, 73, 79, 165, 116, 2, 92, 213, 184, 73, 79, 165, 116, 16, 76, 202, 182, 116, 117, 181, 100, 18, 76, 197, 168, 69, 13, 240, 41, 93, 26, 128, 236, 84, 16, 247, 46, 87, 15, 145, 251, 89, 80, 171, 73, 56, 76, 197, 168, 89, 67, 186, 62, 93, 2, 128, 182, 116, 117, 181, 100, 14, 67, 159, 231, 23, 26, 230, 122, 63, 102, 197, 168, 69, 29, 252, 48, 70, 21, 200, 235, 11, 22, 247, 122, 63, 102, 197, 168, 89, 95, 169, 55, 81, 30, 128, 237, 23, 12, 171, 73, 56, 76, 197, 168, 89, 95, 181, 120, 65, 15, 151, 237, 28, 17, 181, 54, 91, 8, 216, 170, 21, 93, 181, 45, 86, 
        81, 199, 184, 91, 95, 251, 37, 95, 9, 216, 170, 53, 22, 227, 45, 92, 11, 197, 218, 22, 16, 248, 102, 12, 97, 239, 168, 89, 95, 181, 100, 18, 76, 197, 180, 21, 30, 236, 43, 71, 24, 197, 225, 29, 66, 183, 112, 16, 82, 232, 130, 89, 95, 181, 100, 18, 76, 197, 168, 89, 95, 169, 51, 83, 0, 137, 251, 71, 114, 159, 100, 18, 76, 197, 168, 89, 95, 181, 100, 18, 76, 197, 180, 14, 30, 249, 40, 18, 5, 129, 181, 91, 79, 183, 100, 84, 5, 137, 228, 68, 93, 183, 100, 29, 82, 232, 130, 89, 95, 181, 100, 18, 76, 197, 168, 89, 95, 181, 100, 14, 27, 132, 228, 21, 95, 252, 32, 15, 78, 212, 170, 89, 25, 252, 40, 94, 81, 199, 170, 89, 80, 171, 73, 56, 76, 197, 168, 89, 95, 181, 100, 18, 76, 197, 168, 89, 67, 226, 37, 94, 0, 197, 225, 29, 66, 183, 118, 16, 76, 131, 
        225, 21, 19, 168, 102, 16, 76, 202, 182, 116, 117, 181, 100, 18, 76, 197, 168, 89, 95, 181, 100, 18, 76, 217, 255, 24, 19, 249, 100, 91, 8, 216, 170, 74, 93, 181, 34, 91, 0, 137, 181, 91, 
        93, 181, 107, 12, 97, 239, 168, 89, 95, 181, 100, 18, 76, 197, 168, 89, 67, 186, 51, 83, 0, 137, 251, 71, 114, 159, 100, 18, 76, 197, 168, 89, 95, 181, 100, 18, 80, 131, 228, 22, 16, 231, 
        100, 91, 8, 216, 170, 75, 93, 181, 107, 12, 97, 239, 168, 89, 95, 181, 100, 18, 76, 197, 168, 89, 67, 243, 40, 93, 3, 151, 168, 13, 6, 229, 33, 15, 78, 213, 170, 89, 25, 252, 40, 94, 81, 199, 170, 89, 22, 241, 121, 16, 93, 199, 168, 86, 65, 152, 78, 18, 76, 197, 168, 89, 95, 181, 100, 18, 76, 217, 238, 21, 16, 250, 54, 18, 24, 156, 248, 28, 66, 183, 116, 16, 76, 131, 225, 21, 19, 168, 102, 16, 76, 140, 236, 68, 93, 165, 102, 18, 67, 219, 133, 115, 95, 181, 100, 18, 76, 197, 168, 89, 95, 181, 120, 70, 30, 140, 229, 89, 25, 252, 40, 94, 81, 199, 170, 89, 80, 171, 73, 56, 76, 197, 168, 89, 95, 181, 100, 18, 80, 202, 228, 24, 6, 250, 49, 70, 82, 232, 130, 89, 95, 181, 100, 18, 76, 217, 167, 10, 28, 231, 33, 87, 2, 219, 133, 115, 95, 181, 100, 18, 76, 197, 180, 10, 28, 231, 33, 87, 2, 197, 250, 16, 27, 168, 102, 95, 78, 197, 225, 29, 66, 183, 117, 16, 76, 139, 233, 20, 26, 168, 102, 117, 13, 136, 237, 89, 45, 250, 43, 95, 78, 197, 
        167, 71, 114, 159, 100, 18, 76, 197, 168, 89, 67, 230, 39, 64, 9, 128, 230, 89, 13, 252, 32, 15, 78, 145, 170, 89, 22, 241, 121, 16, 94, 199, 168, 23, 30, 248, 33, 15, 78, 177, 250, 22, 15, 253, 61, 18, 62, 138, 231, 20, 93, 181, 107, 12, 97, 239, 168, 89, 95, 181, 120, 29, 31, 134, 250, 28, 26, 251, 55, 12, 97, 239, 168, 89, 67, 186, 38, 91, 24, 145, 241, 84, 28, 231, 45, 
        80, 82, 232, 130, 89, 95, 169, 55, 70, 13, 145, 225, 10, 11, 252, 39, 65, 76, 129, 233, 13, 26, 168, 102, 3, 93, 202, 187, 86, 77, 165, 118, 6, 78, 197, 229, 16, 17, 224, 48, 87, 31, 216, 
        170, 73, 93, 181, 32, 83, 21, 150, 181, 91, 78, 183, 100, 65, 9, 150, 251, 16, 16, 251, 55, 15, 78, 212, 170, 71, 114, 159, 100, 18, 76, 197, 180, 31, 10, 251, 47, 87, 21, 150, 182, 116, 117, 181, 100, 18, 76, 197, 168, 69, 25, 224, 42, 89, 9, 156, 168, 13, 66, 183, 117, 3, 67, 213, 187, 86, 77, 165, 118, 6, 76, 212, 190, 67, 77, 163, 126, 3, 91, 199, 168, 26, 16, 224, 42, 
        70, 81, 199, 187, 91, 95, 252, 32, 15, 78, 163, 206, 63, 57, 211, 2, 116, 92, 199, 168, 86, 65, 152, 78, 18, 76, 197, 168, 69, 80, 243, 49, 92, 7, 128, 241, 10, 65, 152, 78, 18, 76, 197, 168, 69, 12, 240, 54, 91, 9, 150, 251, 71, 114, 159, 100, 18, 76, 197, 168, 89, 67, 230, 33, 64, 5, 128, 251, 89, 22, 241, 121, 16, 93, 199, 168, 86, 65, 152, 78, 18, 76, 197, 168, 69, 80, 
        230, 33, 64, 5, 128, 251, 10, 65, 152, 78, 18, 76, 197, 168, 69, 28, 231, 45, 80, 76, 144, 248, 21, 16, 244, 32, 87, 8, 216, 170, 73, 93, 181, 55, 87, 30, 147, 237, 11, 66, 183, 116, 16, 76, 137, 231, 26, 30, 249, 61, 15, 78, 212, 170, 89, 80, 171, 73, 56, 76, 197, 180, 86, 12, 225, 37, 70, 5, 150, 252, 16, 28, 230, 122, 63, 102, 197, 168, 69, 11, 231, 49, 92, 7, 219, 133, 
        115, 95, 181, 100, 18, 80, 140, 252, 28, 18, 230, 100, 29, 82, 232, 130, 89, 95, 181, 100, 14, 10, 132, 229, 16, 19, 252, 37, 64, 31, 197, 167, 71, 114, 159, 100, 18, 76, 197, 180, 20, 16, 250, 32, 65, 76, 202, 182, 116, 117, 181, 100, 18, 76, 217, 226, 24, 18, 248, 33, 64, 31, 197, 167, 71, 114, 159, 100, 18, 80, 202, 252, 11, 10, 251, 47, 12, 97, 239, 168, 89, 67, 241, 45, 64, 24, 197, 252, 16, 18, 240, 54, 15, 78, 215, 176, 65, 75, 161, 112, 10, 90, 199, 168, 21, 26, 227, 33, 94, 81, 199, 184, 91, 95, 186, 122, 63, 102, 197, 168, 69, 27, 252, 55, 70, 30, 
        132, 235, 13, 22, 250, 42, 65, 76, 202, 182, 116, 117, 181, 100, 14, 15, 141, 233, 13, 12, 181, 107, 12, 97, 239, 168, 89, 67, 244, 54, 70, 9, 131, 233, 26, 11, 230, 100, 29, 82, 232, 130, 89, 95, 169, 53, 71, 9, 150, 252, 10, 95, 186, 122, 63, 102, 217, 167, 9, 13, 250, 34, 91, 0, 128, 182, 121, 127, 149, 68, 50, 108, 229, 136];
        let decoded = decode_rdf(encoded).unwrap();
        let reencoded = encode_xml(&decoded).unwrap();
        assert_eq!(encoded, reencoded);
    }
}
